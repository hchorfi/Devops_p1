---
- name: update repo and cach
  hosts: devza
  tasks:
    - name: Update apt repo and cach
      apt: 
        update_cache: yes
        force_apt_get: yes 
        cache_valid_time: 3600

      # - name: install aptitude using apt
      #   apt: update_cache=yes name=aptitude state=latest force_apt_get=yes

- name: install docker & minikube & kubectl
  hosts: devza
  vars_files:
    - bp_vars.yaml
  tasks:
    - name: install pip
      command: apt install python-pip -y

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present

    - name: Update apt and install docker-ce
      apt: update_cache=yes name=docker-ce state=latest
    - name: install docker-py
      command: pip install docker

    - name: donload minikube
      get_url:
        url: https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        dest: /tmp
        mode: +x

    - name: mv minikube
      command: mv /tmp/minikube-linux-amd64 /usr/local/bin/minikube
    - name: download kubectl
      command: curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.23.1/bin/linux/amd64/kubectl
    - name: chmode kubectl
      command: chmod +x ./kubectl
    - name: mv kubectl to bin
      command: mv ./kubectl /usr/local/bin/kubectl
    - name: start minikube
      command: minikube start --force

    - name: check repo if exist
      stat:
        path: "/root/project1"
      register: project1
    - name: clone repo and change dir
      command: git clone https://github.com/hchorfi/node-hello.git project1
      when: not project1.stat.exists

    - name: build jenkins image as code
      command:  chdir=/root/project1/jenkins/jcasc docker build -t jenkins:jcasc .

    - name: check container if exist
      docker_container_info:
        name: jenkins
      register: jenkins_container
    - name: delete if exist
      command: docker rm --force jenkins
      when: jenkins_container.exists
    
    - name: echo
      command: echo "{{jenkins_ip}} {{DOCKER_HUB_USER}} {{DOCKER_HUB_TOKEN}} {{JENKINS_ADMIN_ID}} {{JENKINS_ADMIN_PASSWORD}}"
      register: out1
    - name: start jenkins container
      command: docker run -u 0 --privileged --name jenkins -d -p 8080:8080 -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/usr/bin/docker --env JENKINS_ADMIN_ID={{JENKINS_ADMIN_ID}} --env JENKINS_ADMIN_PASSWORD={{JENKINS_ADMIN_PASSWORD}} --env JENKINS_URL_IP={{jenkins_ip}} --env DOCKER_HUB_USER={{DOCKER_HUB_USER}} --env DOCKER_HUB_TOKEN={{DOCKER_HUB_TOKEN}} jenkins:jcasc
      register: out
      async: 120
      poll: 0
    - debug: var=out
    - debug: var=out1.stdout_lines